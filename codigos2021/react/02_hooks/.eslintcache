[{"/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/index.js":"1","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/reportWebVitals.js":"2","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/HooksApp.js":"3","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookFormState.js":"4","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookUseState.js":"5","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookTraductorState.js":"6","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookJuegoState.js":"7"},{"size":516,"mtime":1611084219070,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611084029233,"results":"10","hashOfConfig":"9"},{"size":1257,"mtime":1612292526839,"results":"11","hashOfConfig":"9"},{"size":2321,"mtime":1611739620183,"results":"12","hashOfConfig":"9"},{"size":1738,"mtime":1611739618192,"results":"13","hashOfConfig":"9"},{"size":6964,"mtime":1612295796397,"results":"14","hashOfConfig":"9"},{"size":3255,"mtime":1612186130031,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"15llrej",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/index.js",[],["35","36"],"/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/reportWebVitals.js",[],"/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/HooksApp.js",["37","38","39","40"],"import React, { useState } from \"react\";\nimport HookFormState from \"./components/HookFormState\";\nimport HookJuegoState from \"./components/HookJuegoState\";\nimport HookTraductorState from \"./components/HookTraductorState\";\nimport HookUseState from \"./components/HookUseState\";\n\nconst HooksApp = () => {\n  const [contador, setContador] = useState(0);\n\n  console.log(\"Componente padre actualizado \" + contador);\n\n  return (\n    <>\n      {/*  <h1>Aplicación para explicar funcionamiento hooks</h1>\n      <input\n        className=\"form-control\"\n        placeholder=\"Introduce valor inicial\"\n        type=\"number\"\n        onChange={(e) => {\n          //console.log(e.target.value);\n          setContador(parseInt(e.target.value));\n        }}\n      ></input>\n      <button className=\"btn btn-primary\" onClick={() => {}}>\n        Pasar valor\n      </button>\n\n      <div className=\"row mt-4\">\n        <div className=\"col\">\n          <HookUseState numero={contador} />\n        </div>\n        <div className=\"col\">\n          <HookFormState />\n        </div>\n        <div className=\"col\">\n          <HookJuegoState />\n        </div>\n      </div> */}\n      <div className=\"row mt-4\">\n        <HookTraductorState />\n      </div>\n    </>\n  );\n};\n\nexport default HooksApp;\n","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookFormState.js",[],"/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookUseState.js",["41","42"],"import React, { useState } from \"react\";\n\nconst HookUseState = ({ numero }) => {\n  const [counter, setCounter] = useState(numero);\n\n  // const state\n  // const setState\n\n  console.log(\"Componente hijo actualizado \" + counter);\n\n  let operacion;\n\n  const handleOnClick = ({ target }) => {\n    //console.log(e);\n    switch (target.name) {\n      case \"incremento\":\n        setCounter(numero + 1);\n        break;\n      case \"decremento\":\n        setCounter(numero - 1);\n        break;\n      case \"reset\":\n        setCounter(numero);\n        break;\n    }\n    //setCounter(counter + 1);\n  };\n\n  return (\n    <>\n      <h2>Use State</h2>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h3>Ejemplo inicial</h3>\n          <p>El valor del contador es {counter}</p>\n          <button\n            name=\"incremento\"\n            className=\"btn btn-primary\"\n            onClick={\n              handleOnClick\n\n              /*() => {\n              //counter++;\n              //setCounter(counter + 1);\n\n            }*/\n            }\n          >\n            +1\n          </button>\n          <button\n            name=\"decremento\"\n            className=\"btn btn-primary\"\n            onClick={\n              handleOnClick /*() => {\n              //setCounter(counter - 1);\n              setCounter((estadoActual) => estadoActual - 1);\n            }*/\n            }\n          >\n            -1\n          </button>\n          <button\n            name=\"reset\"\n            className=\"btn btn-primary\"\n            onClick={\n              handleOnClick /*() => {\n              setCounter(5);\n            }*/\n            }\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default HookUseState;\n","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookTraductorState.js",["43"],"import React, { useState } from \"react\";\n\nconst HookTraductorState = () => {\n  // tabla general\n  // necesito guardar un modelo de la tabla (esp:\"\",ing:\"\",ale:\"\") traducciones -> [{esp:\"\",ing:\"\",ale:\"\"},{esp:\"\",ing:\"\",ale:\"\"}]\n  // cada vez que agrego cambio las traducciones\n  // yo tengo que renderizar la tabla cada vez que hay una nueva traducción\n  // cada vez que modifico un estado, el la página se renderiza (algo que necesite)\n  // traducciones --> ESTADO\n  // modifico traducción --> modificando un estado (añadiendo al array un nuevo objeto)\n  // como cojo lo que hay en lo input para que al dar agregar se construya el objeto?\n  // objeto - modelo (ESTADO) {esp:\"asdads\",ing:\"asdads\",ale:\"asdasdasd\"}\n\n  // para el buscador?\n  // al escribir en el buscador o al pulsar en el boton --> (ESTADO) palabraTr con el valor del input\n  // busco en el ESTADO traducciones --> array.filter(\"coc\") --> traducciones.map (e=>{ if (e.esp === palabraTr){ return <tr> {e.esp} {e.eng} {e.ale}</tr>} })\n\n  const [diccionario, setDiccionario] = useState([]);\n\n  const [palabra, setPalabra] = useState({\n    espaniol: \"\",\n    ingles: \"\",\n    frances: \"\",\n  });\n\n  const [palabraBuscar, setPalabraBuscar] = useState(\"\");\n\n  const [palabrasCoincidentes, setPalabrasCoincidentes] = useState([]);\n\n  const handleInputs = (event) => {\n    setPalabra({ ...palabra, [event.target.name]: event.target.value });\n  };\n\n  //return console.log();\n\n  const hayTraducciones = () => {\n    return (\n      palabra.espaniol.length > 1 &&\n      palabra.ingles.length > 1 &&\n      palabra.frances.length > 1\n    );\n  };\n\n  return (\n    <>\n      <h2>Traductor de palabras</h2>\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <div className=\"row gap\">\n            <div className=\"col\">\n              <h4>Español</h4>\n              <input\n                name=\"espaniol\"\n                type=\"text\"\n                placeholder=\"palabra español\"\n                className=\"form-control\"\n                value={palabra.espaniol}\n                onChange={handleInputs}\n              ></input>\n            </div>\n            <div className=\"col\">\n              <h4>Frances</h4>\n              <input\n                name=\"frances\"\n                type=\"text\"\n                placeholder=\"palabra francés\"\n                className=\"form-control\"\n                onChange={handleInputs}\n                value={palabra.frances}\n              ></input>\n            </div>\n            <div className=\"col\">\n              <h4>Inglés</h4>\n              <input\n                name=\"ingles\"\n                type=\"text\"\n                placeholder=\"palabra inglés\"\n                className=\"form-control\"\n                onChange={handleInputs}\n                value={palabra.ingles}\n              ></input>\n            </div>\n          </div>\n          <button\n            className=\"btn btn-primary btn-block mt-4\"\n            onClick={() => {\n              // capturar todos los inputs --> palabra\n              // guardar el objeto en la lista (diccionario)\n\n              {\n                hayTraducciones()\n                  ? setDiccionario([\n                      ...diccionario,\n                      { original: palabra.espaniol, traducciones: palabra },\n                    ])\n                  : alert(\"No hay palabras introducidas\");\n                setPalabra({ espaniol: \"\", ingles: \"\", frances: \"\" });\n              }\n\n              // vacia los inputs\n            }}\n          >\n            Agregar palabra\n          </button>\n\n          {diccionario.length > 0 ? (\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Español</th>\n                  <th scope=\"col\">Ingles</th>\n                  <th scope=\"col\">Frances</th>\n                </tr>\n              </thead>\n              <tbody>\n                {/* {diccionario.map((trad, index) => (\n                  <tr key={index}>\n                    <th scope=\"row\">{index + 1}</th>\n                    <td>{trad.traducciones.espaniol}</td>\n                    <td>{trad.traducciones.ingles}</td>\n                    <td>{trad.traducciones.frances}</td>\n                  </tr>\n                ))} */}\n                {diccionario.map(({ traducciones }, index) => (\n                  <tr key={index}>\n                    <th scope=\"row\">{index + 1}</th>\n                    <td>{traducciones.espaniol}</td>\n                    <td>{traducciones.ingles}</td>\n                    <td>{traducciones.frances}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <div class=\"alert alert-primary\" role=\"alert\">\n              Aún no hay palabras en el diccionario\n            </div>\n          )}\n        </div>\n        <div className=\"col-4\">\n          <h3>Buscar de palabras</h3>\n          <input\n            placeholder=\"buscar\"\n            className=\"form-control\"\n            id=\"inputBuscar\"\n            value={palabraBuscar}\n            onChange={(e) => {\n              setPalabraBuscar(e.target.value);\n            }}\n          ></input>\n          <button\n            className=\"btn btn-primary mt-4\"\n            onClick={() => {\n              console.log(palabraBuscar);\n              palabraBuscar.includes();\n              let coincidencias = diccionario.filter((traduccion) =>\n                traduccion.original\n                  .toLowerCase()\n                  .includes(palabraBuscar.toLowerCase())\n              );\n\n              setPalabrasCoincidentes(coincidencias);\n\n              //console.log(coincidencias);\n              // array de palabras coincidentes\n              //document.querySelector(\"#inputBuscar\").value;\n            }}\n          >\n            Buscar\n          </button>\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {palabrasCoincidentes.length > 0 ? (\n                // array de palabras coincidentes\n                palabrasCoincidentes.map((trad, index) => {\n                  return (\n                    <tr key={index}>\n                      <th scope=\"row\">{index + 1}</th>\n                      <td>{trad.traducciones.espaniol}</td>\n                      <td>{trad.traducciones.ingles}</td>\n                      <td>{trad.traducciones.frances}</td>\n                    </tr>\n                  );\n                })\n              ) : (\n                <div class=\"alert alert-warning\" role=\"alert\">\n                  o no has buscado cosas o no hay coincidencia{\" \"}\n                </div>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default HookTraductorState;\n","/Users/borja/Repositorios/ClaseDAWC/codigos2021/react/02_hooks/src/components/HookJuegoState.js",["44","45"],"import React, { useState } from \"react\";\n\nconst HookJuegoState = () => {\n  // state --> modificar el estado\n  const [jugadores, setJugadores] = useState({});\n  // acceso directo a un elemento\n  const { jugador1, jugador2 } = jugadores;\n  const [ganador, setGanador] = useState(\"\");\n  const [estadoBoton, setEstadoBoton] = useState(false);\n\n  /*\n  jugadores = {jugadorUno:{nombre:\"asd\", puntuacion:123123123}}\n  */\n  // al pulsar\n  // alea1\n  // alea2\n  // si el ale1 > ale2 --> se suma un punto al j1\n  // si el ale1 < ale2 --> se suma un punto al j2\n  // si el ale1 == ale2 --> se suma un punto al j1 j2\n  // si alguno de ellos llega a 10 que saliese un div --> alert\n\n  const handleInputs = (e) => {\n    switch (e.target.id) {\n      case \"inputUno\":\n        setJugadores({\n          ...jugadores,\n          jugador1: { nombre: e.target.value, puntuacion: 0 },\n        });\n        break;\n      case \"inputDos\":\n        setJugadores({\n          ...jugadores,\n          jugador2: { nombre: e.target.value, puntuacion: 0 },\n        });\n        break;\n    }\n  };\n\n  return (\n    <>\n      <h2>Juego pulsaciones</h2>\n\n      <div>\n        <input\n          className=\"form-control\"\n          placeholder=\"introduce nombre jugador uno\"\n          name=\"nombre\"\n          id=\"inputUno\"\n          onChange={handleInputs}\n        ></input>\n        <input\n          className=\"form-control\"\n          placeholder=\"introduce nombre jugador dos\"\n          name=\"nombre\"\n          id=\"inputDos\"\n          onChange={handleInputs}\n        ></input>\n        <div>\n          <button className=\"btn btn-success\">Empezar</button>\n          <button\n            className=\"btn btn-success\"\n            disabled={estadoBoton}\n            onClick={() => {\n              let aleatorioUno = Math.random() * 20;\n              let aleatorioDos = Math.random() * 20;\n              if (aleatorioUno > aleatorioDos) {\n                setJugadores({\n                  ...jugadores,\n                  jugador1: {\n                    nombre: jugador1.nombre,\n                    puntuacion: jugador1.puntuacion + 1,\n                  },\n                });\n              } else if (aleatorioDos > aleatorioUno) {\n                setJugadores({\n                  ...jugadores,\n                  jugador2: {\n                    nombre: jugador2.nombre,\n                    puntuacion: jugador2.puntuacion + 1,\n                  },\n                });\n              }\n\n              if (jugador2.puntuacion > 6) {\n                setEstadoBoton(true);\n              }\n            }}\n          >\n            Jugar\n          </button>\n          <button className=\"btn btn-success\" onClick={() => {}}>\n            Resetear\n          </button>\n        </div>\n      </div>\n\n      {jugadores.jugador1 && jugadores.jugador2 ? (\n        <p>\n          {jugador1.nombre} : {jugador1.puntuacion} <br />\n          {jugador2.nombre} : {jugador2.puntuacion} <br />\n        </p>\n      ) : (\n        <p>No se ha empezado</p>\n      )}\n\n      {jugador1 &&\n        jugador2 &&\n        (jugador1.puntuacion > 9 || jugador2.puntuacion > 9) && (\n          <div class=\"alert alert-success\" role=\"alert\">\n            El ganador es: {ganador}\n          </div>\n        )}\n    </>\n  );\n};\n\nexport default HookJuegoState;\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":21},{"ruleId":"50","severity":1,"message":"54","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":22},{"ruleId":"50","severity":1,"message":"55","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":20},{"ruleId":"50","severity":1,"message":"56","line":8,"column":20,"nodeType":"52","messageId":"53","endLine":8,"endColumn":31},{"ruleId":"50","severity":1,"message":"57","line":11,"column":7,"nodeType":"52","messageId":"53","endLine":11,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":15,"column":5,"nodeType":"60","messageId":"61","endLine":25,"endColumn":6},{"ruleId":"62","severity":1,"message":"63","line":90,"column":15,"nodeType":"64","messageId":"65","endLine":98,"endColumn":16},{"ruleId":"50","severity":1,"message":"66","line":8,"column":19,"nodeType":"52","messageId":"53","endLine":8,"endColumn":29},{"ruleId":"58","severity":1,"message":"59","line":23,"column":5,"nodeType":"60","messageId":"61","endLine":36,"endColumn":6},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'HookFormState' is defined but never used.","Identifier","unusedVar","'HookJuegoState' is defined but never used.","'HookUseState' is defined but never used.","'setContador' is assigned a value but never used.","'operacion' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setGanador' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]